(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{361:function(t,n,e){"use strict";e.r(n);var a=e(22),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1、List,Set都是继承自Collection接口，Map则不是\n\n2、List特点：元素有放入顺序，元素可重复 ，Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法 ，另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。） \n \n3.Set和List对比： \nSet：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。 \nList：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。 \n \n4.Map适合储存键值对的数据\n")])])]),e("h2",{attrs:{id:"list使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list使用"}},[t._v("#")]),t._v(" List使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public static void main(String[] args) {\n    ArrayList<String> s = new ArrayList<>();\n\n    s.add("hello");\n    s.add("world");\n\n    Iterator<String> iterator = s.iterator();\n    while (iterator.hasNext()){\n        String next = iterator.next();\n        System.out.println(next);\n    }\n\n    for (String s1 : s) {\n        System.out.println(s1);\n    }\n\n}\n')])])]),e("h2",{attrs:{id:"set使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set使用"}},[t._v("#")]),t._v(" Set使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public static void main(String[] args) {\n    HashSet<String> strings = new HashSet<>();\n\n    strings.add("a");\n    strings.add("b");\n    strings.add("a");\n    strings.add("0");\n\n\n    System.out.println(strings);  // [0, a, b]\n\n    for (String string : strings) {\n        System.out.println(string);\n    }\n}\n')])])]),e("h2",{attrs:{id:"map使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map使用"}},[t._v("#")]),t._v(" Map使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public static void main(String[] args) {\n    HashMap<Integer, String> integerStringHashMap = new HashMap<>();\n\n    integerStringHashMap.put(1,"hello");\n    integerStringHashMap.put(2,"world");\n\n    System.out.println(integerStringHashMap);  //{1=hello, 2=world}\n\n    Set<Integer> integers = integerStringHashMap.keySet();\n    for (Integer integer : integers) {\n        System.out.println(integer);  // key\n        String s = integerStringHashMap.get(integer);\n        System.out.println(s); // value\n    }\n    \n    Iterator<Integer> iterator = integers.iterator();\n    while (iterator.hasNext()){\n        Integer next = iterator.next();\n        System.out.println(next); //key\n        System.out.println(integerStringHashMap.get(next)); //value\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);