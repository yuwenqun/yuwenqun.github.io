(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{349:function(t,a,e){"use strict";e.r(a);var n=e(22),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-java自带序列化机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-java自带序列化机制"}},[t._v("#")]),t._v(" 1.Java自带序列化机制")]),t._v(" "),e("ul",[e("li",[t._v("第一种")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("使用默认的序列化机制，即实现Serializable接口即可，不需要实现任何方法。\n\n该接口没有任何方法，只是一个标记而已，告诉Java虚拟机该类可以被序列化了。\n然后利用writeObject进行序列化和用readObject进行反序列化。\n")])])]),e("h4",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.io.Serializable;\n\npublic class person implements Serializable {   //只要类中加入Serializable标志即可，无法实现具体的方法\n    private int age=0;\n    private String name;\n\n    ......\n}\n\nmain函数:\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        //序列化\n        person p1 = new person(18, "张三");\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("./xx.obj"));\n        objectOutputStream.writeObject(p1);\n\n\n        //反序列化\n        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("./xx.obj"));\n        Object o = objectInputStream.readObject();\n        System.out.println((person)o);\n\n    }\n\n')])])]),e("ul",[e("li",[t._v("第二种")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("实现Externalizable接口。\n\nExternalizable接口是继承自Serializable接口的，我们在实现Externalizable接口时，\n必须实现writeExternal(ObjectOutput)和readExternal(ObjectInput)方法，\n在这两个方法下我们可以手动的进行序列化和反序列化那些需要保存的成员变量。\n")])])]),e("h4",{attrs:{id:"代码-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码-2"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class person2 implements Externalizable {  //实现Externalizable接口\n    private int age=0;\n    private String name;\n\n    ........\n\n\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException { //重写序列化方法\n        out.writeUTF(name);\n        out.writeInt(age);\n    }\n\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { // 重写反序列化方法\n        this.name = in.readUTF();\n        this.age = in.readInt();\n    }\n}\n")])])]),e("h2",{attrs:{id:"_2-fastjson序列化机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-fastjson序列化机制"}},[t._v("#")]),t._v(" 2.FastJson序列化机制")]),t._v(" "),e("ul",[e("li",[t._v("fastjson在序列化以及反序列化的过程中并没有使用Java自带的序列化机制，而是自定义了一套机制。")])]),t._v(" "),e("h4",{attrs:{id:"fastjson漏洞总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson漏洞总结"}},[t._v("#")]),t._v(" fastjson漏洞总结")]),t._v(" "),e("p",[e("img",{attrs:{src:"/java/fastjson/fastjson.png",alt:""}})]),t._v(" "),e("p",[e("a",{attrs:{href:"/java/fastjson/fastjson.xmind"}},[t._v("fastjson.xmind")])]),t._v(" "),e("h2",{attrs:{id:"_3-autotype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-autotype"}},[t._v("#")]),t._v(" 3.AutoType")]),t._v(" "),e("p",[e("img",{attrs:{src:"/java/fastjson/fastjson%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.jpg",alt:""}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("autoType发生的位置在图中的1位置。\nautoType指的就是:调用JSON.parse()通过json字符串中指定@type字段来指定要将字符串转换为什么类的对象实例\nversion <= 1.2.24没有做任何的限制，导致可以任意反序列化,也就能能够任意的实例化任何的对象，就能造成任意的代码执行。\nrmi或者ldap只是利用的桥梁。\n1.2.25开始引入autoType的控制(黑白名单反序列化类的),但是autoType过滤不严谨就造成多种绕过的问题。\n直到1.2.68版本开始引入safemode模式,当safeMode开启时，@type这个specialkey完全无用。\n无论白名单和黑名单，都不支持autoType。\n因此目前位置1.2.68开始较少有RCE的漏洞(1.autotype需要支持 2.存在可被利用的第三方库的引入)。\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);