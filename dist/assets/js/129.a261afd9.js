(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{431:function(t,e,s){"use strict";s.r(e);var a=s(22),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量类型"}},[t._v("#")]),t._v(" 1.变量类型")]),t._v(" "),s("ul",[s("li",[t._v("全局变量")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export {\n    const http_post_body_length = 200 &redef;\n}\n")])])]),s("ul",[s("li",[t._v("常数")])]),t._v(" "),s("p",[s("code",[t._v("const default_capture_password = F &redef;")])]),t._v(" "),s("ul",[s("li",[t._v("局部变量(函数中定义)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("event zeek_init()\n{\n    local test = add_two(10);\n}\n")])])]),s("h2",{attrs:{id:"_2-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[t._v("#")]),t._v(" 2.数据类型")]),t._v(" "),s("p",[t._v("|  数据类型   | 描述  | 举例 |\n|  ----  | ----  |\n| int   | 64 位有符号整数 |\n| count | 64 位无符号整数 |\n| double | 双精度浮点精度 |\n| bool | 布尔值 (T/F) |\n| addr | IP 地址、IPv4 和 IPv6 |\n| port | 传输层端口 |  23/tcp |\n| subnet | CIDR 子网掩码 | 192.168.1.0/24 |\n| time | 绝对纪元时间 |\n| interval | 一个时间间隔 |\n| pattern | 正则表达式 |")]),t._v(" "),s("p",[t._v('strftime("%Y/%m/%d %H:%M:%S", network_time()) => 2011/06/18 19:03:08')]),t._v(" "),s("h2",{attrs:{id:"_3-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-集合"}},[t._v("#")]),t._v(" 3.集合")]),t._v(" "),s("p",[s("code",[t._v("local ssl_ports: set[port];")]),t._v("  //定义类型")]),t._v(" "),s("p",[s("code",[t._v("local non_ssl_ports = set( 23/tcp, 80/tcp, 143/tcp, 25/tcp );")]),t._v("  //创建时直接赋值")]),t._v(" "),s("p",[t._v("//for循环")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('for ( i in ssl_ports )\n    print fmt("SSL Port: %s", i);\n')])])]),s("p",[t._v("// if判断")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if ( 587/tcp !in ssl_ports )\n    add ssl_ports[587/tcp];\n")])])]),s("h2",{attrs:{id:"_4-表（字典）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-表（字典）"}},[t._v("#")]),t._v(" 4.表（字典）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(' # Declaration of the table.\nlocal ssl_services: table[string] of port;\n\n# Initialize the table.\nssl_services = table(["SSH"] = 22/tcp, ["HTTPS"] = 443/tcp);\n\n# Insert one key-yield pair into the table.\nssl_services["IMAPS"] = 993/tcp;\n\n# Check if the key "SMTPS" is not in the table.\nif ( "SMTPS" !in ssl_services )\n    ssl_services["SMTPS"] = 587/tcp;\n\n# Iterate over each key in the table.\nfor ( k in ssl_services )\n    print fmt("Service Name:  %s - Common Port: %s", k, ssl_services[k]);\n')])])]),s("h2",{attrs:{id:"_5-向量（有序的集合）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-向量（有序的集合）"}},[t._v("#")]),t._v(" 5.向量（有序的集合）")]),t._v(" "),s("p",[s("code",[t._v("local v1: vector of count;")]),t._v(" "),s("code",[t._v("local v2 = vector(1, 2, 3, 4);")])]),t._v(" "),s("p",[s("code",[t._v("| v1 |")]),t._v(" 长度")]),t._v(" "),s("h2",{attrs:{id:"_6-type和record"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-type和record"}},[t._v("#")]),t._v(" 6.type和record")]),t._v(" "),s("ul",[s("li",[t._v("当与type关键字组合时，record可以生成复合类型")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('type Service: record {\n    name: string;\n    ports: set[port];\n    rfc: count;\n};\n\nlocal dns: Service = [$name="dns", $ports=set(53/udp, 53/tcp), $rfc=1035];\n\nprint fmt("Service: %s(RFC%d)",serv$name, serv$rfc);\n    \n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);