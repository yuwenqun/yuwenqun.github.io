(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{403:function(t,n,e){"use strict";e.r(n);var a=e(22),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"问题描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),e("h4",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题:")]),t._v(" "),e("ul",[e("li",[t._v("父组件数据改变，子组件ECharts数据重新渲染(默认父组件直接修改数据无法使得子组件重新渲染)")])]),t._v(" "),e("h2",{attrs:{id:"解决思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决思路"}},[t._v("#")]),t._v(" 解决思路")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("子组件添加watch监控数据变化,实时渲染数据\n\n父组件代码：\n<div>\n    <employee-e-charts v-if=\"degreeData\" :id=\"'degree'\" :chart-data=\"degreeData\" :width=\"'600px'\" />\n</div>\n\n子组件代码：\n<template>\n  <div>\n    <div :id=\"id\" :style=\"{width: width, height: height}\" />\n  </div>\n</template>\n\n<script>\nimport echarts from 'echarts'\n\nexport default {\n  name: 'EmployeeECharts',\n  props: {\n    width: {\n      type: String,\n      default: '400px'\n    },\n    height: {\n      type: String,\n      default: '300px'\n    },\n    chartData: {\n      type: Object,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: ''\n    }\n  },\n  watch: {   // *  重点代码 *\n    chartData(val) {\n      this.setOptions(val)\n    }\n  },\n  created() {\n    this.$nextTick(() => {\n      this.init()\n    })\n  },\n  methods: {\n    async init() {\n      this.chart = echarts.init(document.getElementById(this.id))\n      this.setOptions(this.chartData)\n    },\n    setOptions({ reportName, employeeX, employeeY } = {}) {\n      this.chart.setOption({\n        title: {\n          text: reportName\n        },\n        tooltip: {},\n        legend: {\n          data: employeeX\n        },\n        xAxis: {\n          data: employeeX\n        },\n        yAxis: {},\n        series: [{\n          type: 'bar',\n          data: employeeY,\n          label: {\n            normal: {\n              show: true,\n              position: 'top'\n            }\n          }\n        }]\n      })\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n")])])]),e("h3",{attrs:{id:"重点是子组件里面的watch代码，父组件只需要修改degreedata的值就能使得子组件也会渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重点是子组件里面的watch代码，父组件只需要修改degreedata的值就能使得子组件也会渲染"}},[t._v("#")]),t._v(" 重点是子组件里面的watch代码，父组件只需要修改degreeData的值就能使得子组件也会渲染")])])}),[],!1,null,null,null);n.default=r.exports}}]);