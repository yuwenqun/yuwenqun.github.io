(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{410:function(t,a,s){"use strict";s.r(a);var e=s(22),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"防越权方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防越权方案"}},[t._v("#")]),t._v(" 防越权方案")]),t._v(" "),s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),s("p",[t._v("原则上防越权的方案实际就是前置权限的判断和控制,但是很多时候难免遗漏，这个是开发中经常出现的问题,因此为了不考虑是否出现接口权限前置遗漏的情况下，引入防越权的机制")]),t._v(" "),s("h2",{attrs:{id:"方案一：接口参数加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案一：接口参数加密"}},[t._v("#")]),t._v(" 方案一：接口参数加密")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://xxxx/xxx.do?id=AES(id)  //POST同理\n")])])]),s("h2",{attrs:{id:"方案二：接口参数加签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案二：接口参数加签"}},[t._v("#")]),t._v(" 方案二：接口参数加签")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://xxxx/xxx.do?id=id&sign=md5(id) //POST同理\n\n")])])]),s("h2",{attrs:{id:"方案三-接口参数加签-加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案三-接口参数加签-加密"}},[t._v("#")]),t._v(" 方案三:接口参数加签+加密")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://xxxx/xxx.do?id=AES(id)&sign=md5(id) //POST同理\n\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);