(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{364:function(a,t,e){"use strict";e.r(t);var r=e(22),i=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"spring简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring简介"}},[a._v("#")]),a._v(" spring简介")]),a._v(" "),e("h6",{attrs:{id:"ioc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[a._v("#")]),a._v(" IOC:")]),a._v(" "),e("blockquote",[e("p",[a._v("如果一个类A 的功能实现需要借助于类B，那么就称类B是类A的依赖，如果在类A的内部去实例化类B，那么两者之间会出现较高的耦合，一旦类B出现了问题，类A也需要进行改造，如果这样的情况较多，每个类之间都有很多依赖，那么就会出现牵一发而动全身的情况，程序会极难维护，并且很容易出现问题。要解决这个问题，就要把A类对B类的控制权抽离出来，交给一个第三方去做，把控制权反转给第三方，就称作控制反转（IOC Inversion Of Control）。控制反转是一种思想，是能够解决问题的一种可能的结果，而依赖注入（Dependency Injection）就是其最典型的实现方法。由第三方（我们称作IOC容器）来控制依赖，把他通过构造函数、属性或者工厂模式等方法，注入到类A内，这样就极大程度的对类A和类B进行了解耦。")])]),a._v(" "),e("h6",{attrs:{id:"aop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[a._v("#")]),a._v(" AOP:")]),a._v(" "),e("h2",{attrs:{id:"依赖注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[a._v("#")]),a._v(" 依赖注入")]),a._v(" "),e("blockquote",[e("p",[a._v("依赖注入（Dependency Injection）是IOC的最典型的实现方法")])]),a._v(" "),e("blockquote",[e("p",[a._v("applicationContext.xml分模块引用  "),e("code",[a._v('<import resource="applicationContext-xxx.xml"/>')])])]),a._v(" "),e("p",[e("img",{attrs:{src:"/java/wiki/javaweb/jdbc/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86.jpg",alt:""}})]),a._v(" "),e("p",[e("a",{attrs:{href:"/java/wiki/javaweb/attachment/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86.xmind"}},[a._v("依赖注入.xmind")])]),a._v(" "),e("ul",[e("li",[a._v("属性 setter 注入")]),a._v(" "),e("li",[a._v("构造方法注入")])]),a._v(" "),e("blockquote",[e("p",[a._v("xml配置")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/java/wiki/javaweb/jdbc/spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.jpg",alt:""}})]),a._v(" "),e("p",[e("a",{attrs:{href:"/java/wiki/javaweb/attachment/spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.xmind"}},[a._v("依赖注入.xmind")])]),a._v(" "),e("blockquote",[e("p",[a._v("注解开发")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/java/wiki/javaweb/jdbc/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.png",alt:""}})]),a._v(" "),e("p",[e("a",{attrs:{href:"/java/wiki/javaweb/attachment/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.xmind"}},[a._v("依赖注入.xmind")])]),a._v(" "),e("h2",{attrs:{id:"aop-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop-2"}},[a._v("#")]),a._v(" AOP")])])}),[],!1,null,null,null);t.default=i.exports}}]);