(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{344:function(e,n,s){"use strict";s.r(n);var r=s(22),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"mybatis思维图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis思维图"}},[e._v("#")]),e._v(" Mybatis思维图")]),e._v(" "),s("p",[s("img",{attrs:{src:"/java/wiki/mybatis/mybatis.jpg",alt:""}})]),e._v(" "),s("p",[s("a",{attrs:{href:"/java/wiki/mybatis/Mybatis.xmind"}},[e._v("mybatis.xmind")])]),e._v(" "),s("h2",{attrs:{id:"一、mybatis入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、mybatis入门"}},[e._v("#")]),e._v(" 一、Mybatis入门")]),e._v(" "),s("h5",{attrs:{id:"_1-添加pom-xml坐标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加pom-xml坐标"}},[e._v("#")]),e._v(" 1.添加pom.xml坐标")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>it.xyz</groupId>\n    <artifactId>mybatisDemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.6</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.11</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n\n</project>\n')])])]),s("h5",{attrs:{id:"_2-编写实体类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-编写实体类"}},[e._v("#")]),e._v(" 2.编写实体类")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("package it.xyz.domain;\n\npublic class User {\n    private String User;\n    private String Host;\n\n    public String getUser() {\n        return User;\n    }\n\n    public void setUser(String user) {\n        User = user;\n    }\n\n    public String getHost() {\n        return Host;\n    }\n\n    public void setHost(String host) {\n        Host = host;\n    }\n\n\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder(\"User{\");\n        sb.append(\"User='\").append(User).append('\\'');\n        sb.append(\", Host='\").append(Host).append('\\'');\n        sb.append('}');\n        return sb.toString();\n    }\n}\n\n")])])]),s("h5",{attrs:{id:"_3-编写映射文件usermapper-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-编写映射文件usermapper-xml"}},[e._v("#")]),e._v(" 3.编写映射文件UserMapper.xml")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\x3c!--\n实体类的映射文件\nnamespace 指定接口的类全名\n--\x3e\n<mapper namespace="UserMapper">\n    \x3c!--\n    查询语句\n    id: 接口中方法的名字\n    resultType：返回的实体类的类型，类全名\n    --\x3e\n    <select id="findAllUsers" resultType="it.xyz.domain.User">\n        select * from user\n    </select>\n\n    <select id="findOneUser" resultType="it.xyz.domain.User" parameterType="String">\n        select  * from user where User=#{User} limit 1\n    </select>\n</mapper>\n')])])]),s("h5",{attrs:{id:"_4-编写核心文件sqlmapconfig-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-编写核心文件sqlmapconfig-xml"}},[e._v("#")]),e._v(" 4.编写核心文件SqlMapConfig.xml")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE configuration\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n<configuration>\n\n    \x3c!--数据库环境配置--\x3e\n    <environments default="mysql">\n        <environment id="mysql">\n            <transactionManager type="JDBC"></transactionManager>\n            <dataSource type="pooled">\n                <property name="driver" value="com.mysql.cj.jdbc.Driver"></property>\n                <property name="url" value="jdbc:mysql://localhost:3306/mysql?characterEncoding=utf8"></property>\n                <property name="username" value="root"></property>\n                <property name="password" value="123456"></property>\n            </dataSource>\n        </environment>\n    </environments>\n\n    \x3c!--2. 加载映射文件--\x3e\n    <mappers>\n        <mapper resource="it/xyz/domain/UserMapper.xml"></mapper>\n    </mappers>\n</configuration>\n')])])]),s("h5",{attrs:{id:"_5-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试"}},[e._v("#")]),e._v(" 5.测试")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package it.xyz.ibatisTest;\n\nimport it.xyz.domain.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class mybatisTest {\n    @Test\n    public void UserMapperTest() throws IOException {\n\n        //1.读取配置文件\n        InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);\n        //3.使用工厂生产SqlSession对象\n        SqlSession session = sqlSessionFactory.openSession();\n        //4.1 执行Sql语句\n        List<User> userlist = session.selectList("UserMapper.findAllUsers");\n        //5. 打印结果\n        for (User o : userlist) {\n            System.out.println(o);\n        }\n\n        System.out.println("***********");\n        //4.2\n        User user = session.selectOne("UserMapper.findOneUser", "root");\n        System.out.println(user);\n        //6.释放资源\n        session.close();\n        in.close();\n    }\n}\n')])])]),s("h5",{attrs:{id:"_6-调试-获取执行的sql语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-调试-获取执行的sql语句"}},[e._v("#")]),e._v(" 6.调试/获取执行的sql语句")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('sqlmapConfig.xml:\n<settings>\n    \x3c!-- 打印查询语句 --\x3e\n    <setting name="logImpl" value="STDOUT_LOGGING" />\n</settings>\n')])])]),s("h2",{attrs:{id:"二、动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、动态代理"}},[e._v("#")]),e._v(" 二、动态代理")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("简述：利用mybatis动态代理的机制,无需再自己写dao层代码,只需要写dao层的接口即可完成获取数据操作\n")])])]),s("p",[s("img",{attrs:{src:"/java/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png",alt:""}})]),e._v(" "),s("h6",{attrs:{id:"_1-要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-要求"}},[e._v("#")]),e._v(" 1.要求")]),e._v(" "),s("ul",[s("li",[e._v("1.namespace的值为Dao层interface的类绝对路径")]),e._v(" "),s("li",[e._v("2.id 为dao层的接口方法名")]),e._v(" "),s("li",[e._v("3.参数和返回值需一致")]),e._v(" "),s("li",[e._v("4.测试代码")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('    @Test\n    public void UserMapperTest3() throws IOException {\n        //1.读取配置文件\n        InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");\n        //2.创建SqlSessionFactory工厂\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);\n        //3.使用工厂生产SqlSession对象\n        SqlSession session = sqlSessionFactory.openSession();\n        //4.1 执行Sql语句\n\n        UserInfoDao mapper = session.getMapper(UserInfoDao.class);\n        List<UserInfo> allUsers = mapper.findAllUsers();\n        System.out.println(allUsers);\n\n        //6.释放资源\n        session.close();\n        in.close();\n    }\n')])])]),s("h2",{attrs:{id:"三、动态sql映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、动态sql映射"}},[e._v("#")]),e._v(" 三、动态sql映射")]),e._v(" "),s("h6",{attrs:{id:"if-条件使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-条件使用"}},[e._v("#")]),e._v(" if 条件使用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('UserMapper.xml : \n<select id="findAllUsers" resultType="it.xyz.domain.UserInfo" parameterType="it.xyz.domain.UserInfo">\n    select * from userinfo\n    <where>\n        <if test="username!=null">\n            and username = #{username}\n        </if>\n        <if test="password!=null">\n            and password=#{password}\n        </if>\n        <if test="age!=0">\n            and age=#{age}\n        </if>\n        <if test="sex!=null">\n            and sex=#{sex}\n        </if>\n    </where>\n</select>\n')])])]),s("h6",{attrs:{id:"foreache-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreache-使用"}},[e._v("#")]),e._v(" foreache 使用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<select id="findById" resultType="it.xyz.domain.UserInfo" parameterType="list">\n    select * from userinfo\n    <where>\n        <foreach item="item" index="index" collection="list" open="id in (" separator="," close=")">\n            #{item}\n        </foreach>\n    </where>\n</select>\n')])])]),s("h2",{attrs:{id:"四、分页助手使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、分页助手使用"}},[e._v("#")]),e._v(" 四、分页助手使用")]),e._v(" "),s("h6",{attrs:{id:"_1-导入坐标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-导入坐标"}},[e._v("#")]),e._v(" 1.导入坐标")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("pom.xml: \n<dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n    <version>5.0.0</version>\n</dependency>\n")])])]),s("h6",{attrs:{id:"_2-配置sqlmapconfig-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置sqlmapconfig-xml"}},[e._v("#")]),e._v(" 2.配置sqlmapConfig.xml")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("加载插件，environments前插入\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('    <plugins>\n        <plugin interceptor="com.github.pagehelper.PageInterceptor">\n            \x3c!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库--\x3e\n            <property name="helperDialect" value="mysql"/>\n        </plugin>\n    </plugins>\n')])])]),s("h6",{attrs:{id:"_3-加入分页代码位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-加入分页代码位置"}},[e._v("#")]),e._v(" 3.加入分页代码位置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Page<Object> objects = PageHelper.startPage(1,1);  //关键点，无需更改sql语句,直接使用即可\n\n//执行数据语句的查询操作\nUserInfoDao mapper = session.getMapper(UserInfoDao.class);\nUserInfo userInfo = new UserInfo();\nList<UserInfo> allUsers = mapper.findAllUsers(userInfo);  //结果集会自动加入分页的limit内容\nSystem.out.println(allUsers);\n\n//查询出数据之后再调用才能获取到当前的分页相关的数据，否则无法获取\nint pageNum = objects.getPageNum();  //当前页数\nlong total = objects.getTotal();  //总数量\nint pageSize = objects.getPageSize();   //每页数量\n")])])]),s("h2",{attrs:{id:"五、多表查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、多表查询"}},[e._v("#")]),e._v(" 五、多表查询")]),e._v(" "),s("h4",{attrs:{id:"_1对1模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1对1模式"}},[e._v("#")]),e._v(" 1对1模式")]),e._v(" "),s("h5",{attrs:{id:"_1-sql语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-sql语句"}},[e._v("#")]),e._v(" 1.SQL语句")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("select *,userinfo.id userid from orders\ninner join userinfo\non orders.uid = userinfo.id\n")])])]),s("h5",{attrs:{id:"_2-实体类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实体类"}},[e._v("#")]),e._v(" 2.实体类")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('package it.xyz.domain;\n\npublic class orders {\n    private int id;\n    private String order;\n    private int uid;\n\n    private UserInfo userinfo;  //关键点\n\n    public UserInfo getUserinfo() {\n        return userinfo;\n    }\n\n    public void setUserinfo(UserInfo userinfo) {\n        this.userinfo = userinfo;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getOrder() {\n        return order;\n    }\n\n    public void setOrder(String order) {\n        this.order = order;\n    }\n\n    public int getUid() {\n        return uid;\n    }\n\n    public void setUid(int uid) {\n        this.uid = uid;\n    }\n\n    @Override\n    public String toString() {\n        final StringBuilder sb = new StringBuilder("orders{");\n        sb.append("id=").append(id);\n        sb.append(", order=\'").append(order).append(\'\\\'\');\n        sb.append(", uid=").append(uid);\n        sb.append(", userinfo=").append(userinfo);\n        sb.append(\'}\');\n        return sb.toString();\n    }\n}\n\n')])])]),s("h5",{attrs:{id:"_3-sqlmapxml文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-sqlmapxml文件"}},[e._v("#")]),e._v(" 3.sqlmapxml文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\x3c!--\n实体类的映射文件\nnamespace 指定接口的类全名\n--\x3e\n<mapper namespace="it.xyz.dao.ordersDao">\n    \x3c!--\n    查询语句\n    id: 接口中方法的名字\n    resultType：返回的实体类的类型，类全名\n    --\x3e\n\n    <resultMap id="orderMap" type="it.xyz.domain.orders">\n        \x3c!--\n          type  返回的数据类型\n          id ： 该resultMap的id标示\n\n          result:  数据查询的内容和实体类映射关系,column 表示数据库的字段名称，property表示实体类的属性名称\n        --\x3e\n        <id column="id" property="id"></id>\n        <result column="order" property="order"></result>\n        <result column="uid" property="uid"></result>\n\n        <result column="userid" property="userinfo.id"></result>\n        <result column="username" property="userinfo.username"></result>\n        <result column="password" property="userinfo.password"></result>\n        <result column="age" property="userinfo.age"></result>\n        <result column="sex" property="userinfo.sex"></result>\n    </resultMap>\n    <select id="findOrders" resultMap="orderMap">\n        select *,userinfo.id userid  from orders inner join userinfo on orders.uid = userinfo.id\n    </select>\n\n</mapper>\n\n')])])]),s("h5",{attrs:{id:"_4-接口方法：略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口方法：略"}},[e._v("#")]),e._v(" 4.接口方法：略")]),e._v(" "),s("h5",{attrs:{id:"_5-测试：-略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试：-略"}},[e._v("#")]),e._v(" 5.测试： 略")]),e._v(" "),s("h4",{attrs:{id:"_1对多模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1对多模式"}},[e._v("#")]),e._v(" 1对多模式")]),e._v(" "),s("h5",{attrs:{id:"sqlmapxml文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sqlmapxml文件"}},[e._v("#")]),e._v(" SQLMAPXML文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\x3c!--\n实体类的映射文件\nnamespace 指定接口的类全名\n--\x3e\n<mapper namespace="it.xyz.dao.UserInfoDao">\n    \x3c!--\n    查询语句\n    id: 接口中方法的名字\n    resultType：返回的实体类的类型，类全名\n    --\x3e\n    <resultMap id="UserinfoRoleMap"  type="it.xyz.domain.UserInfo">\n        <id column="uid" property="id"></id>\n        <result column="username" property="username"></result>\n        <result column="password" property="password"></result>\n        <result column="age" property="age"></result>\n        <result column="sex" property="sex"></result>\n\n        <collection property="roles" ofType="it.xyz.domain.roles">\n\n            \x3c!--\n              roles  表示的是UserInfo实体类的属性名\n              ofType 表示实体类的名称，与下面的字段进行映射\n            --\x3e\n            <id column="rid" property="id"></id>\n            <result column="userid" property="userid"></result>\n            <result column="role" property="role"></result>\n        </collection>\n\n    </resultMap>\n\n    <select id="findUserAndRolesAll" resultMap="UserinfoRoleMap">\n       select *,roles.id rid,userinfo.id uid from userinfo left join roles on userinfo.id = roles.userid\n    </select>\n</mapper>\n')])])])])}),[],!1,null,null,null);n.default=t.exports}}]);