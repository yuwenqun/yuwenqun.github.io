(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{380:function(a,t,n){"use strict";n.r(t);var s=n(22),l=Object(s.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"_1-async简述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-async简述"}},[a._v("#")]),a._v(" 1.async简述")]),a._v(" "),n("h6",{attrs:{id:"为了适应异步编程，减少回调的嵌套。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为了适应异步编程，减少回调的嵌套。"}},[a._v("#")]),a._v(" 为了适应异步编程，减少回调的嵌套。")]),a._v(" "),n("ul",[n("li",[a._v("git仓库开源地址：https://github.com/caolan/async")]),a._v(" "),n("li",[a._v("官方文档地址:http://caolan.github.io/async/v3/docs.html")])]),a._v(" "),n("h6",{attrs:{id:"async的内容分为三部分："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async的内容分为三部分："}},[a._v("#")]),a._v(" Async的内容分为三部分：")]),a._v(" "),n("ul",[n("li",[a._v("流程控制：简化十种常见流程的处理")]),a._v(" "),n("li",[a._v("集合处理：如何使用异步操作处理集合中的数据")]),a._v(" "),n("li",[a._v("工具类：几个常用的工具类")])]),a._v(" "),n("h6",{attrs:{id:"由于nodejs是异步编程模型，有一些在同步编程中很容易做到的事情，现在却变得很麻烦。async的流程控制就是为了简化这些操作。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#由于nodejs是异步编程模型，有一些在同步编程中很容易做到的事情，现在却变得很麻烦。async的流程控制就是为了简化这些操作。"}},[a._v("#")]),a._v(" 由于nodejs是异步编程模型，有一些在同步编程中很容易做到的事情，现在却变得很麻烦。Async的流程控制就是为了简化这些操作。")]),a._v(" "),n("h2",{attrs:{id:"_2-串行执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-串行执行"}},[a._v("#")]),a._v(" 2.串行执行")]),a._v(" "),n("h4",{attrs:{id:"函数间无关联"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数间无关联"}},[a._v("#")]),a._v(" 函数间无关联")]),a._v(" "),n("h6",{attrs:{id:"async-series-task1-task2-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-series-task1-task2-callback"}},[a._v("#")]),a._v(" async.series([task1,task2,....],callback)")]),a._v(" "),n("ul",[n("li",[a._v("有多个异步函数需要依次调用")]),a._v(" "),n("li",[a._v("一个完成之后才能执行下一个")]),a._v(" "),n("li",[a._v("各函数之间没有数据的交换，仅仅需要保证其执行顺序")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("async.series([\n    function(callback){\n        // do something\n        callback(null,1)\n    },\n    function(callback){\n        // do something\n        callback(null,2)\n    }\n],function(err,result){\n    if(err){\n        // do something\n    }else{\n       // do something \n    }\n})\n")])])]),n("h6",{attrs:{id:"具体流程规则执行如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体流程规则执行如下"}},[a._v("#")]),a._v(" 具体流程规则执行如下:")]),a._v(" "),n("ul",[n("li",[a._v("列表中的function中的callback使用规则:\n"),n("ul",[n("li",[a._v("第一个参数为null表示程序正常往下执行,第二个参数开始为最后一个function的result值,追加模式")]),a._v(" "),n("li",[a._v("第一个参数非null表示程序终止,直接跳转到执行最后一个function回调函数,第二个参数开始为最后一个function的result值,追加模式")])])]),a._v(" "),n("li",[a._v("无论所有的函数是否都正常执行,回调函数一定会被执行")])]),a._v(" "),n("p",[n("img",{attrs:{src:"/nodejs/async_series.jpg",alt:""}})]),a._v(" "),n("h4",{attrs:{id:"函数间参数传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数间参数传递"}},[a._v("#")]),a._v(" 函数间参数传递")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("async.waterfall([\n    function(callback){\n        // do something\n        callback(null,1)\n    },\n    function(arg1,callback){\n        // do something\n        callback(null,2)\n    }\n],function(err,result){\n    console.log('err:'+err)\n    console.log('result:'+result)\n})\n")])])]),n("h6",{attrs:{id:"具体流程规则执行如下-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体流程规则执行如下-2"}},[a._v("#")]),a._v(" 具体流程规则执行如下:")]),a._v(" "),n("ul",[n("li",[a._v("列表中的function中的callback使用规则:\n"),n("ul",[n("li",[a._v("第一个参数为null表示程序正常往下执行,第二个参数开始为下一个函数的参数")]),a._v(" "),n("li",[a._v("第一个参数非null表示程序终止,直接跳转到执行最后一个function回调函数,第二个参数开始为最后一个function的result值")])])]),a._v(" "),n("li",[a._v("无论所有的函数是否都正常执行,回调函数一定会被执行")])]),a._v(" "),n("p",[n("img",{attrs:{src:"/nodejs/async_waterfall.jpg",alt:""}})]),a._v(" "),n("h2",{attrs:{id:"_3-并行执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-并行执行"}},[a._v("#")]),a._v(" 3.并行执行")]),a._v(" "),n("h4",{attrs:{id:"_3-1-并行执行多个函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-并行执行多个函数"}},[a._v("#")]),a._v(" 3.1 并行执行多个函数")]),a._v(" "),n("h6",{attrs:{id:"async-parallellimit-task1-task2-num-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-parallellimit-task1-task2-num-callback"}},[a._v("#")]),a._v(" async.parallelLimit([task1,task2....],num,callback)")]),a._v(" "),n("ul",[n("li",[a._v("并行执行多个(num为个数并发限制)函数")]),a._v(" "),n("li",[a._v("传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。")]),a._v(" "),n("li",[a._v("如果某个函数出错，则立刻将err和已经执行完的函数的结果值传给parallel最终的callback,其它未执行完的函数的值不会传到最终数据。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("async.parallelLimit([\n    function(callback){\n        setTimeout(function(){\n            // do something\n            callback(null,11)\n        },2000)\n    },\n    function(callback){\n        setTimeout(function(){\n            // do something\n            callback(null,22)\n        },2000)\n    },\n    function(callback){\n        setTimeout(function(){\n            // do something\n            callback(null,33)\n        },2000)\n    },\n    function(callback){\n        setTimeout(function(){\n            // do something\n            callback(null,44)\n        },2000)\n    },\n    ......\n],2,function(err,result){\n    console.log(err)\n    console.log(result)\n})\n")])])]),n("h4",{attrs:{id:"_3-2-对集合或者数组遍历并发执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-对集合或者数组遍历并发执行"}},[a._v("#")]),a._v(" 3.2 对集合或者数组遍历并发执行")]),a._v(" "),n("h6",{attrs:{id:"async-maplimit-array-iterable-asynciterable-object-limit-asyncfunction-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-maplimit-array-iterable-asynciterable-object-limit-asyncfunction-callback"}},[a._v("#")]),a._v(" async.mapLimit(Array | Iterable | AsyncIterable | Object,limit,AsyncFunction,callback)")]),a._v(" "),n("h6",{attrs:{id:"limit-：-并发数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#limit-：-并发数"}},[a._v("#")]),a._v(" limit  ： 并发数")]),a._v(" "),n("h6",{attrs:{id:"asyncfunction-并发的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#asyncfunction-并发的函数"}},[a._v("#")]),a._v(" AsyncFunction : 并发的函数")]),a._v(" "),n("h6",{attrs:{id:"callback-回调函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback-回调函数"}},[a._v("#")]),a._v(" callback : 回调函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var hosts=['www','ns','abc','login','test']\nasync.mapLimit(hosts,3,function(item,callback){\n        dns.resolve(item+'.baidu.com', (err,records)=>{\n            if(!err){\n                console.log(item+'.qq.com:'+records);\n                callback(null,records)\n            }else{\n                \n                // console.log(err);\n                callback(null)\n            }\n        })\n},function(err,result){\n    console.log('err:'+err);\n    console.log('result:'+result)\n})\n\n//备注：\n1.依次从hosts取出1个数据赋值给item\n2.并发3个function执行\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);