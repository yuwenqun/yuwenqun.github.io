(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{411:function(e,t,r){"use strict";r.r(t);var s=r(22),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"_0-javaweb介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_0-javaweb介绍"}},[e._v("#")]),e._v(" 0.javaweb介绍")]),e._v(" "),r("blockquote",[r("p",[e._v("JavaWeb三大组件:Servlet/Filter/Listener")])]),e._v(" "),r("h2",{attrs:{id:"_1-servlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-servlet"}},[e._v("#")]),e._v(" 1.Servlet")]),e._v(" "),r("blockquote",[r("p",[e._v("Servlet是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态Web内容。")])]),e._v(" "),r("h3",{attrs:{id:"_1-1-处理请求数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-处理请求数据"}},[e._v("#")]),e._v(" 1.1 处理请求数据")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('\nString servletPath = request.getServletPath(); // /404\nString contextPath = request.getContextPath(); //  /javaweb_war_exploded\nString requestURI = request.getRequestURI(); //  /javaweb_war_exploded/404\nStringBuffer requestURL = request.getRequestURL(); //  http://localhost:8080/javaweb_war_exploded/404\nString method = request.getMethod(); // GET / POST\n\nEnumeration<String> headerNames = request.getHeaderNames(); // 请求头枚举数据\nwhile (headerNames.hasMoreElements()){\n    String s = headerNames.nextElement();  //header的名字： host/cookie/user-agent\n    String header = request.getHeader(s);  // header的值：   Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\n    System.out.println(s+":"+header);\n}\n\nString parameter = request.getParameter("name"); //获取传递的name参数的值，GET/POST通用\n\n\n//多选框的值获取\nString[] names = request.getParameterValues("name");  // http://host/?name=张三&name=王五, 结果:[\'张三\',\'王五\']\nfor (String name : names) {\n    System.out.println(name);  \n}\n\n// 遍历获取所有的值\nEnumeration<String> parameterNames = request.getParameterNames();\nwhile (parameterNames.hasMoreElements()){\n    String s = parameterNames.nextElement();\n    String parameter = request.getParameter(s);\n    System.out.println(s+":"+parameter);\n}\n\n\n//获取post参数为json格式的数据\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    int len = 0;\n    StringBuilder stringBuilder = new StringBuilder();\n    while((len=request.getInputStream().read())!=-1){\n        char a = (char)len;\n        stringBuilder.append(a);  //将读取到的post数据保存到stringBuilder中\n    }\n\n    Map parse = (Map)JSON.parse(stringBuilder.toString()); //将对象转换为map对象    \n    String name = ((String) parse.get("name"));\n    System.out.println(name);\n\n}\n')])])]),r("h3",{attrs:{id:"_1-2-响应数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-响应数据"}},[e._v("#")]),e._v(" 1.2 响应数据")]),e._v(" "),r("h4",{attrs:{id:"_1-2-1-响应json数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-响应json数据"}},[e._v("#")]),e._v(" 1.2.1 响应JSON数据")]),e._v(" "),r("ul",[r("li",[e._v("1.2.1.1 获取依赖包")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("commons-beanutils-1.9.3.jar   \ncommons-logging-1.2.jar\ncommons-collections-3.2.1.jar \nezmorph-1.0.6.jar\ncommons-lang-2.6.jar          \njson-lib-2.4-jdk13.jar\n")])])]),r("ul",[r("li",[r("p",[e._v("1.2.1.2 引入\n"),r("img",{attrs:{src:"/java/wiki/javaweb/servlet/asLibrary.jpg",alt:""}}),e._v(" "),r("img",{attrs:{src:"/java/wiki/javaweb/servlet/addtoModule.jpg",alt:""}})])]),e._v(" "),r("li",[r("p",[e._v("1.2.1.3 代码")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    ......\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put("a","b");\n        jsonObject.put("c","d");\n        response.setCharacterEncoding("UTF-8");\n        response.setContentType("application/json;charset=UTF-8");\n        response.getWriter().print(jsonObject);\n\n    }\n}\n')])])]),r("h4",{attrs:{id:"_1-2-2-抛出错误-404"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-抛出错误-404"}},[e._v("#")]),e._v(" 1.2.2 抛出错误/404")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    response.sendError(520,"File Not Found"); \n}\n')])])]),r("h4",{attrs:{id:"_1-2-3-重定向"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-重定向"}},[e._v("#")]),e._v(" 1.2.3 重定向")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('response.sendRedirect("http://www.baidu.com");\n')])])]),r("h3",{attrs:{id:"_1-3-session和cookie"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-session和cookie"}},[e._v("#")]),e._v(" 1.3 Session和Cookie")]),e._v(" "),r("h3",{attrs:{id:"_1-4-servlet自动分发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-servlet自动分发"}},[e._v("#")]),e._v(" 1.4 Servlet自动分发")]),e._v(" "),r("blockquote",[r("p",[e._v("抽取baseServlet模块：baseServlet.java")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('public class baseServlet extends HttpServlet {  //继承不是实现,默认会执行service方法\n    @Override\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n\n        //1。获取执行的方法名称\n        HttpServletRequest request = (HttpServletRequest) req;\n\n        String requestURI = request.getRequestURI(); // /javaweb_war_exploded/user/add\n        String methodName = requestURI.substring(requestURI.lastIndexOf("/") + 1); // add\n\n        HttpServletResponse resp = (HttpServletResponse) res;\n\n        try {\n            Method method = this.getClass().getMethod(methodName, ServletRequest.class, ServletResponse.class);\n            method.invoke(this,req,res);  // 反射的方式来执行方法\n        } catch (NoSuchMethodException e) {\n            resp.sendError(404,"Method Not Found!");\n        } catch (IllegalAccessException e) {\n            resp.sendError(403,"Method Not Allow!");\n        } catch (InvocationTargetException e) {\n            resp.sendError(500,"Request Error!");\n        }\n    }\n}\n')])])]),r("blockquote",[r("p",[e._v("入口Servlet编写: userServlet.java")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('public class userServlet extends baseServlet {  //继承baseServlet方法，如下的方法会自动被调用执行\n    public void findOne(ServletRequest req, ServletResponse res){\n        System.out.println("findone");\n    }\n\n    public void findAll(ServletRequest req, ServletResponse res){\n        System.out.println("findall");\n    }\n}\n')])])]),r("blockquote",[r("p",[e._v("web.xml 略")])]),e._v(" "),r("h2",{attrs:{id:"_2-filter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-filter"}},[e._v("#")]),e._v(" 2.Filter")]),e._v(" "),r("p",[r("img",{attrs:{src:"/java/wiki/javaweb/servlet/filter.png",alt:""}})]),e._v(" "),r("blockquote",[r("p",[e._v("通过控制对chain.doFilter的方法的调用，来决定是否需要访问目标资源。")])]),e._v(" "),r("ul",[r("li",[e._v("比如，可以在用户权限验证等等。判断用户是否有访问某些资源的权限，有权限放行，没权限不执行chain.doFilter方法。")]),e._v(" "),r("li",[e._v("比如，解决中文乱码的问题等等。可以在doFilter方法前，执行设置请求编码与响应的编码。甚至可以对request接口进行封装装饰来处理get请求方式的中文乱码问题(重写相　　应的request.getParameter方法)。")]),e._v(" "),r("li",[e._v("比如对整个web网站进行压缩。在调用chain.doFilter方法之前用类A对response对象进行封装装饰，重写 getOutputStream和重写getWriter方法。在类A内部中，将输出　　内容缓存进ByteArrayOutputStream流中，然后在 chain.doFilter方法执行后，获取类A中ByteArrayOutputStream流缓存数据，用GZIPOutputStream流进行 压缩下。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/java/wiki/javaweb/servlet/filter%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.jpg",alt:""}})]),e._v(" "),r("blockquote",[r("p",[e._v("典型应用举例")])]),e._v(" "),r("ul",[r("li",[e._v("认证权限控制")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {\n    HttpServletRequest req1 = (HttpServletRequest) req;\n\n    req1.setCharacterEncoding("utf-8");  //设置请求编码\n    resp.setCharacterEncoding("utf8");  //设置响应编码\n\n    //判断是否是请求登陆页面\n    if (req1.getServletPath().equals("/login")){\n        chain.doFilter(req,resp); //请求登陆页放行\n    }\n\n    //判断是否有登陆\n    String username = ((String) ((HttpServletRequest) req).getSession().getAttribute("username"));\n    if (username!=null){\n        chain.doFilter(req,resp); //有登陆态放行\n    }else{\n        resp.getWriter().print("当前未登陆，请登陆谢谢");  //无登陆态跳转到登陆页或者返回登陆失败信息\n    }\n\n}\n')])])]),r("h2",{attrs:{id:"_3-listener"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-listener"}},[e._v("#")]),e._v(" 3.Listener")]),e._v(" "),r("blockquote",[r("p",[e._v("Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动\n而启动，只初始化一次，随web应用的停止而销毁。主要作用是：做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些\n固定的对象等等,后续在springMVC中只要以spring容器的预加载。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('web.xml中listener的配置:\n    <listener>\n        <listener-class>it.javaweb.listener.baseListener</listener-class>\n    </listener>\n\nbaseListener代码：\npublic class baseListener implements ServletContextListener,\n        HttpSessionListener, HttpSessionAttributeListener {\n    // -------------------------------------------------------\n    // ServletContextListener implementation\n    // -------------------------------------------------------\n    public void contextInitialized(ServletContextEvent sce) {\n        ServletContext servletContext = sce.getServletContext();  //获取ServletContext的实例对象\n        servletContext.setAttribute("app","abc123");  //设置属性\n        System.out.println("app容器创建成功");\n    }\n        \n}\n\nServlet中获取属性值:\npublic class indexServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        ServletContext servletContext = request.getServletContext();  //获取ServletContext的实例对象\n        Object app = servletContext.getAttribute("app"); //获取对象\n        System.out.println(app);  // abc123\n\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);