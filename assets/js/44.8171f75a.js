(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{348:function(t,n,e){"use strict";e.r(n);var a=e(22),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"多线程高并发安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多线程高并发安全"}},[t._v("#")]),t._v(" 多线程高并发安全")]),t._v(" "),e("h4",{attrs:{id:"先看一段代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先看一段代码"}},[t._v("#")]),t._v(" 先看一段代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('threadRunnable.java:\n\npublic class threadRunnable implements  Runnable{\n    private int ticket=100;\n\n    @Override\n    public void run() {\n        while (true) {\n            if (ticket > 0) {\n                System.out.println(Thread.currentThread().getName() + "获取了第 " + ticket + " 张票");\n                ticket--;\n            }\n\n        }\n    }\n}\n\nmain:\npublic class threadtest {\n    public static void main(String[] args) throws InterruptedException {\n        threadRunnable t = new threadRunnable();\n\n        Thread t1 = new Thread(t,"飞机");\n        Thread t2 = new Thread(t,"坦克");\n\n        t1.start();\n        t2.start();\n    }\n}\n\n输出结果:\n飞机获取了第 100 张票\n坦克获取了第 100 张票\n坦克获取了第 98 张票\n飞机获取了第 99 张票\n飞机获取了第 96 张票\n坦克获取了第 97 张票\n飞机获取了第 95 张票\n飞机获取了第 93 张票\n飞机获取了第 92 张票\n......\n...\n\n')])])]),e("h4",{attrs:{id:"分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("对于类中的ticket为2个线程的共享变量,由于2个线程都会争抢CPU的运行时间,\n同一个时刻可能获取到相同的变量值,就会出现上述的情况\n")])])]),e("h4",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("可以使用同步块的方式解决,threadRunnable.java修改后的代码\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class threadRun implements Runnable {\n    private int ticket = 100;\n    private Object o = new Object();  //🔒\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (o){  //同步块加锁机制,同一时刻只有一个线程能获取锁,并且没有获取锁的线程会等待\n                if (ticket > 0) {\n                    System.out.println(Thread.currentThread().getName() + "获取了第 " + ticket + " 张票");\n                    ticket--;\n                }\n            }\n\n        }\n\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);