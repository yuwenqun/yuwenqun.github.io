(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{352:function(a,e,t){"use strict";t.r(e);var s=t(22),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("根据类的路径(例如:java.lang.Runtime)通过反射能获得该类,并且能获取该类的所有方法\n并且能执行,无需import该类和new实例化对象\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Class clazz = Class.forName("java.lang.Runtime") :  获取类的方法\nclazz.newInstance()  :实例化对象\nMethod method = class.getMethod("exec") :获取类的exec方法,如果方法需要参数则需要传对应的类,例如String.class\nmethod.invoke((clazz.newInstance()) :执行exec方法\n')])])]),t("h2",{attrs:{id:"反射执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射执行过程"}},[a._v("#")]),a._v(" 反射执行过程")]),a._v(" "),t("p",[t("img",{attrs:{src:"/java/reflex/reflex_md.jpg",alt:""}})]),a._v(" "),t("ul",[t("li",[a._v("Class.forName: 执行的对应类的static{} 中的代码")]),a._v(" "),t("li",[a._v("newInstance(): 执行的是构造方法")]),a._v(" "),t("li",[a._v("invoke : 执行的是调用对应的方法中的代码\n"),t("ul",[t("li",[t("code",[a._v("如果这个方法是一个普通方法，那么第一个参数是类对象")])]),a._v(" "),t("li",[t("code",[a._v("如果这个方法是一个静态方法，那么第一个参数是类")])])])])]),a._v(" "),t("h2",{attrs:{id:"反射枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射枚举"}},[a._v("#")]),a._v(" 反射枚举")]),a._v(" "),t("h4",{attrs:{id:"_1-静态方法调用-runtime-getruntime-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态方法调用-runtime-getruntime-exec"}},[a._v("#")]),a._v(" 1.静态方法调用[Runtime.getRuntime.exec]")]),a._v(" "),t("p",[a._v('Runtime.getRuntime.exec("open /Applications/Calculator.app");')]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Class<?> aClass = Class.forName("java.lang.Runtime");\nMethod exec = aClass.getMethod("exec",String.class); // public Process exec(String command) {...}\nMethod getRuntime = aClass.getMethod("getRuntime");// public static Runtime getRuntime() { .... }\nObject Runtime_getRuntime = getRuntime.invoke(aClass); //Runtime.getRuntime\nexec.invoke(Runtime_getRuntime, "open /Applications/Calculator.app"); //Runtime.getRuntime.exec("open /Applications/Calculator.app")\n')])])]),t("h4",{attrs:{id:"_2-普通方法调用-java-lang-processbuilder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-普通方法调用-java-lang-processbuilder"}},[a._v("#")]),a._v(" 2.普通方法调用[java.lang.ProcessBuilder]")]),a._v(" "),t("p",[a._v('new ProcessBuilder("touch /tmp/1.txt").start();')]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Class<?> aClass = Class.forName("java.lang.ProcessBuilder");\n\nString[] cmds = new String[]{"open","/Applications/Calculator.app"};  //定义执行的命令\nConstructor<?> pbConstruct = aClass.getConstructor(List.class); //public ProcessBuilder(List<String> command){ ...... }\nProcessBuilder processBuilder = ((ProcessBuilder) pbConstruct.newInstance(Arrays.asList(cmds)));  // new ProcessBuilder("open /Application/Calculator.app");\nprocessBuilder.start(); // run\n')])])]),t("p",[t("em",[t("strong",[a._v("以上是通过方式1触发")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('String[] cmds = new String[]{"open","/Applications/Calculator.app"};\n\nClass<?> aClass = Class.forName("java.lang.ProcessBuilder");\nMethod start = aClass.getMethod("start");\n\nstart.invoke(aClass.getConstructor(List.class).newInstance(Arrays.asList(cmds)));\n')])])]),t("h4",{attrs:{id:"_3-私有方法和私有构造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-私有方法和私有构造"}},[a._v("#")]),a._v(" 3.私有方法和私有构造")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Class clazz = Class.forName("java.lang.Runtime"); \nConstructor m = clazz.getDeclaredConstructor();   //私有构造\nm.setAccessible(true);  //必须设置否则无法调用私有方法\nclazz.getMethod("exec", String.class).invoke(m.newInstance(), "calc.exe");\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);